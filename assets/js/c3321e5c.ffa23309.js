"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3318],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(r),g=a,f=c["".concat(p,".").concat(g)]||c[g]||m[g]||l;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3257:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const l={sidebar_label:"img_utils",title:"img_utils"},i=void 0,o={unversionedId:"reference/img_utils",id:"reference/img_utils",isDocsHomePage:!1,title:"img_utils",description:"llava\\_formater",source:"@site/docs/reference/img_utils.md",sourceDirName:"reference",slug:"/reference/img_utils",permalink:"/autogen/docs/reference/img_utils",editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/reference/img_utils.md",tags:[],version:"current",frontMatter:{sidebar_label:"img_utils",title:"img_utils"},sidebar:"referenceSideBar",previous:{title:"code_utils",permalink:"/autogen/docs/reference/code_utils"},next:{title:"math_utils",permalink:"/autogen/docs/reference/math_utils"}},p=[{value:"llava_formater",id:"llava_formater",children:[],level:4},{value:"gpt4v_formatter",id:"gpt4v_formatter",children:[],level:4},{value:"extract_img_paths",id:"extract_img_paths",children:[],level:4}],s={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h4",{id:"llava_formater"},"llava","_","formater"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def llava_formater(prompt: str,\n                   order_image_tokens: bool = False) -> Tuple[str, List[str]]\n")),(0,a.kt)("p",null,"Formats the input prompt by replacing image tags and returns the new prompt along with image locations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"prompt (str): The input string that may contain image tags like <img ...>."),(0,a.kt)("li",{parentName:"ul"},"order_image_tokens (bool, optional): Whether to order the image tokens with numbers.\nIt will be useful for GPT-4V. Defaults to False.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Tuple[str, List","[str]","]: A tuple containing the formatted string and a list of images (loaded in b64 format).")),(0,a.kt)("h4",{id:"gpt4v_formatter"},"gpt4v","_","formatter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def gpt4v_formatter(prompt: str) -> List[Union[str, dict]]\n")),(0,a.kt)("p",null,"Formats the input prompt by replacing image tags and returns a list of text and images."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"prompt (str): The input string that may contain image tags like <img ...>.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"List[Union","[str, dict]","]: A list of alternating text and image dictionary items.")),(0,a.kt)("h4",{id:"extract_img_paths"},"extract","_","img","_","paths"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def extract_img_paths(paragraph: str) -> list\n")),(0,a.kt)("p",null,"Extract image paths (URLs or local paths) from a text paragraph."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"paragraph")," ",(0,a.kt)("em",{parentName:"li"},"str")," - The input text paragraph.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"list")," - A list of extracted image paths.")))}u.isMDXComponent=!0}}]);